Timer unit: 1e-07 s

Total time: 42.8784 s
File: c:\Users\Informatica\Documents\GitHub\Catan-Smart-Edition\CatanServer\src\firstNN.py
Function: interpret_state at line 41

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    41                                               @line_profiler.profile
    42                                               def interpret_state(self, game_state:catanData.CatanState):
    43     23355    2675549.0    114.6      0.6          hextensors = torch.zeros(19, 21)
    44     23355     429286.0     18.4      0.1          playertensors = torch.zeros(4, 5)
    45                                                   
    46    467091     942459.0      2.0      0.2          for i in range(19):
    47    443737    1236223.0      2.8      0.3              hex = game_state.hexes[i]
    48    443737   20858610.0     47.0      4.9              hextensors[i][0] = hex[0] # Resource
    49    443737   17126143.0     38.6      4.0              hextensors[i][1] = hex[1] # Dice roll
    50    443737   16950274.0     38.2      4.0              hextensors[i][2] = hex[2] # Has robber
    51    443737    1328993.0      3.0      0.3              cornerInxexes = compiledHexIndex.neighbourCorners[i]
    52    443737    1005801.0      2.3      0.2              corners = []
    53   3106159    7700173.0      2.5      1.8              for cornerIndex in cornerInxexes:
    54   2662422    6315487.0      2.4      1.5                  corner = game_state.corners[cornerIndex]
    55   2662422    4110879.0      1.5      1.0                  corners.append(corner)
    56    443737    1170932.0      2.6      0.3              edgeIndexes = compiledHexIndex.neighbourEdges[i]
    57    443737     938016.0      2.1      0.2              edges = []
    58   3106159    7269672.0      2.3      1.7              for edgeIndex in edgeIndexes:
    59   2662422    6151476.0      2.3      1.4                  edge = game_state.edges[edgeIndex]
    60   2662422    3927891.0      1.5      0.9                  edges.append(edge)
    61    443737   18304764.0     41.3      4.3              hextensors[i][3] = self.normalizePlayer(corners[0][0], game_state.currentPlayer)
    62    443737   17183751.0     38.7      4.0              hextensors[i][4] = corners[0][1]
    63    443737   17414503.0     39.2      4.1              hextensors[i][5] = self.normalizePlayer(corners[1][0], game_state.currentPlayer)
    64    443737   16995987.0     38.3      4.0              hextensors[i][6] = corners[1][1]
    65    443737   17284092.0     39.0      4.0              hextensors[i][7] = self.normalizePlayer(corners[2][0], game_state.currentPlayer)
    66    443737   16929364.0     38.2      3.9              hextensors[i][8] = corners[2][1]
    67    443737   17303713.0     39.0      4.0              hextensors[i][9] = self.normalizePlayer(corners[3][0], game_state.currentPlayer)
    68    443737   16942175.0     38.2      4.0              hextensors[i][10] = corners[3][1]
    69    443737   17278905.0     38.9      4.0              hextensors[i][11] = self.normalizePlayer(corners[4][0], game_state.currentPlayer)
    70    443737   16946958.0     38.2      4.0              hextensors[i][12] = corners[4][1]
    71    443737   17293555.0     39.0      4.0              hextensors[i][13] = self.normalizePlayer(corners[5][0], game_state.currentPlayer)
    72    443737   16925809.0     38.1      3.9              hextensors[i][14] = corners[5][1]
    73    443737   17427205.0     39.3      4.1              hextensors[i][15] = self.normalizePlayer(edges[0][0], game_state.currentPlayer)
    74    443736   17250120.0     38.9      4.0              hextensors[i][16] = self.normalizePlayer(edges[1][0], game_state.currentPlayer)
    75    443736   17218967.0     38.8      4.0              hextensors[i][17] = self.normalizePlayer(edges[2][0], game_state.currentPlayer)
    76    443736   17205307.0     38.8      4.0              hextensors[i][18] = self.normalizePlayer(edges[3][0], game_state.currentPlayer)
    77    443736   17240796.0     38.9      4.0              hextensors[i][19] = self.normalizePlayer(edges[4][0], game_state.currentPlayer)
    78    443736   17262669.0     38.9      4.0              hextensors[i][20] = self.normalizePlayer(edges[5][0], game_state.currentPlayer)            
    79                                                       
    80    116770     263792.0      2.3      0.1          for i in range(4):
    81     93416     270938.0      2.9      0.1              playerdata = game_state.players[i]
    82                                                               
    83    560496    1121318.0      2.0      0.3              for j in range(5):
    84    467080   16299425.0     34.9      3.8                  playertensors[i][j] = float(playerdata[j])
    85                                                               
    86     23354     281679.0     12.1      0.1          return hextensors, playertensors

 42.88 seconds - c:\Users\Informatica\Documents\GitHub\Catan-Smart-Edition\CatanServer\src\firstNN.py:41 - interpret_state
