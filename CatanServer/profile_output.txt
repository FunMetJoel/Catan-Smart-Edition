Timer unit: 1e-07 s

Total time: 1.60839 s
File: c:\Users\Informatica\Documents\GitHub\Catan-Smart-Edition\CatanServer\src\secondNN.py
Function: __init__ at line 144

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   144                                               @line_profiler.profile
   145                                               def __init__(self):
   146         4       1972.0    493.0      0.0          super().__init__()
   147                                                   # 19 hexes, 21 values each and 4 players, 6 values each
   148                                                   # Define the heads for the 21-size input vectors
   149        12       8850.0    737.5      0.1          self.hexes = nn.ModuleList([
   150       152      22770.0    149.8      0.1              nn.Sequential(
   151        76     117096.0   1540.7      0.7                  nn.Linear(21, 64),
   152        76      18856.0    248.1      0.1                  nn.ReLU()
   153        84        373.0      4.4      0.0              ) for _ in range(19)
   154                                                   ])
   155                                                   
   156        12       6742.0    561.8      0.0          self.hexes2 = nn.ModuleList([
   157       152      21562.0    141.9      0.1              nn.Sequential(
   158        76     192042.0   2526.9      1.2                  nn.Linear(64, 64),
   159        76      18104.0    238.2      0.1                  nn.ReLU()
   160        84        283.0      3.4      0.0              ) for _ in range(19)
   161                                                   ])
   162                                           
   163                                                   # Define the heads for the 6-size input vectors
   164        12       2301.0    191.8      0.0          self.players = nn.ModuleList([
   165        32       3951.0    123.5      0.0              nn.Sequential(
   166        16      16182.0   1011.4      0.1                  nn.Linear(5, 32),
   167        16       2910.0    181.9      0.0                  nn.ReLU()
   168        24        140.0      5.8      0.0              ) for _ in range(4)
   169                                                   ])
   170                                                   
   171        12       2431.0    202.6      0.0          self.players2 = nn.ModuleList([
   172        32       3902.0    121.9      0.0              nn.Sequential(
   173        16      17789.0   1111.8      0.1                  nn.Linear(32, 32),
   174        16       3232.0    202.0      0.0                  nn.ReLU()
   175        24         90.0      3.8      0.0              ) for _ in range(4)
   176                                                   ])
   177                                           
   178                                                   # Example output processing layer, combining all head outputs
   179         8       5656.0    707.0      0.0          self.fullyConnected1 = nn.Sequential(
   180         4    1245511.0 311377.8      7.7              nn.Linear(19 * 64 + 4 * 32, 128*32),
   181         4       6436.0   1609.0      0.0              nn.ReLU()
   182                                                   )
   183                                                   
   184         8       8534.0   1066.8      0.1          self.fullyConnected2 = nn.Sequential(
   185         4    3779193.0 944798.2     23.5              nn.Linear(128*32, 128*32),
   186         4       9476.0   2369.0      0.1              nn.ReLU()
   187                                                   )
   188                                                   
   189         8       7700.0    962.5      0.0          self.fullyConnected3 = nn.Sequential(
   190         4    3706152.0 926538.0     23.0              nn.Linear(128*32, 128*32),
   191         4       9032.0   2258.0      0.1              nn.ReLU()
   192                                                   )
   193                                                   
   194         8       6791.0    848.9      0.0          self.fullyConnected4 = nn.Sequential(
   195         4    2118787.0 529696.8     13.2              nn.Linear(128*32, 64*32),
   196         4       8406.0   2101.5      0.1              nn.ReLU()
   197                                                   )
   198                                                   
   199         8       5777.0    722.1      0.0          self.actionHead = nn.Sequential(
   200         4     815108.0 203777.0      5.1              nn.Linear(64*32, 64*32),
   201         4       7101.0   1775.2      0.0              nn.ReLU()
   202                                                   )
   203                                                   
   204         8       4576.0    572.0      0.0          self.roadsHead = nn.Sequential(
   205         4     853777.0 213444.2      5.3              nn.Linear(64*32, 64*32),
   206         4       6455.0   1613.8      0.0              nn.ReLU()
   207                                                   )
   208                                                   
   209         8       4721.0    590.1      0.0          self.settlementsHead = nn.Sequential(
   210         4     852013.0 213003.2      5.3              nn.Linear(64*32, 64*32),
   211         4       6104.0   1526.0      0.0              nn.ReLU()
   212                                                   )
   213                                                   
   214         8       6067.0    758.4      0.0          self.tradeForHead = nn.Sequential(
   215         4     837754.0 209438.5      5.2              nn.Linear(64*32, 64*32),
   216         4      91394.0  22848.5      0.6              nn.ReLU()
   217                                                   )
   218                                                   
   219         8       6706.0    838.2      0.0          self.tradeWithHead = nn.Sequential(
   220         4    1037094.0 259273.5      6.4              nn.Linear(64*32, 64*32),
   221         4       8187.0   2046.8      0.1              nn.ReLU()
   222                                                   )
   223                                                   
   224         8       2878.0    359.8      0.0          self.outputAction = nn.Sequential(
   225                                                       # 10000 = end turn, 01000 = build settlement, 00100 = build city, 00010 = build road, 00001 = trade
   226         4      20537.0   5134.2      0.1              nn.Linear(64*32, 5),
   227         4       1809.0    452.2      0.0              nn.Sigmoid()
   228                                                   )
   229                                                   
   230         8       3348.0    418.5      0.0          self.outputRoads = nn.Sequential(
   231         4      59232.0  14808.0      0.4              nn.Linear(64*32, 72),
   232         4       1554.0    388.5      0.0              nn.Sigmoid()
   233                                                   )
   234                                                   
   235         8       2947.0    368.4      0.0          self.outputSettlements = nn.Sequential(
   236         4      39107.0   9776.8      0.2              nn.Linear(64*32, 54),
   237         4       1393.0    348.2      0.0              nn.Sigmoid()
   238                                                   )
   239                                                   
   240         8       2805.0    350.6      0.0          self.outputTradeFor = nn.Sequential(
   241         4      14595.0   3648.8      0.1              nn.Linear(64*32, 5),
   242         4       1587.0    396.8      0.0              nn.Sigmoid()
   243                                                   )
   244                                                   
   245         8       2378.0    297.2      0.0          self.OutputTradeWith = nn.Sequential(
   246         4      12650.0   3162.5      0.1              nn.Linear(64*32, 5),
   247         4       1025.0    256.2      0.0              nn.Sigmoid()
   248                                                   )

Total time: 145.35 s
File: c:\Users\Informatica\Documents\GitHub\Catan-Smart-Edition\CatanServer\src\secondNN.py
Function: forward at line 250

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   250                                               @line_profiler.profile
   251                                               def forward(self, input_hexes, input_players):
   252                                                   # Apply each head to the corresponding vector in input_21
   253     64200   34497683.0    537.3      2.4          processed_hexes = [head(vector) for head, vector in zip(self.hexes, input_hexes)]
   254      3210    1671313.0    520.7      0.1          processed_hexes = torch.cat(processed_hexes, dim=-1)  # Concatenate along the feature dimension
   255                                           
   256                                                   # processed_hexes = [head(vector) for head, vector in zip(self.hexes2, processed_hexes)]
   257                                                   # processed_hexes = torch.cat(processed_hexes, dim=-1)  # Concatenate along the feature dimension
   258                                           
   259                                           
   260                                                   # Apply each head to the corresponding vector in input_6
   261     16050    7209639.0    449.2      0.5          processed_players = [head(vector) for head, vector in zip(self.players, input_players)]
   262      3210     489982.0    152.6      0.0          processed_players = torch.cat(processed_players, dim=-1)  # Concatenate along the feature dimension
   263                                           
   264                                                   # processed_players = [head(vector) for head, vector in zip(self.players2, processed_players)]
   265                                                   # processed_players = torch.cat(processed_players, dim=-1)  # Concatenate along the feature dimension
   266                                           
   267                                                   # Combine all processed outputs
   268      3210     286682.0     89.3      0.0          combined = torch.cat([processed_hexes, processed_players], dim=-1)
   269                                           
   270                                                   # Final output processing
   271      3210  144302031.0  44953.9      9.9          w = self.fullyConnected1(combined)
   272      3210  305299301.0  95108.8     21.0          w = self.fullyConnected2(w)
   273      3210  306990454.0  95635.7     21.1          w = self.fullyConnected3(w)
   274      3210  156609996.0  48788.2     10.8          w = self.fullyConnected4(w)
   275      3210   95972686.0  29898.0      6.6          x = self.actionHead(w)
   276      3209   95510719.0  29763.4      6.6          y = self.roadsHead(w)
   277      3209   95537952.0  29771.9      6.6          z = self.settlementsHead(w)
   278      3209   95176365.0  29659.2      6.5          a = self.tradeForHead(w)
   279      3209   94979036.0  29597.7      6.5          b = self.tradeWithHead(w)
   280                                                   
   281      3209    4131840.0   1287.6      0.3          action = self.outputAction(x)
   282      3209    6152932.0   1917.4      0.4          roads = self.outputRoads(y)
   283      3209    4800824.0   1496.0      0.3          settlements = self.outputSettlements(z)
   284      3209    2063199.0    642.9      0.1          tradeFor = self.outputTradeFor(a)
   285      3209    1704487.0    531.2      0.1          tradeWith = self.OutputTradeWith(b)
   286                                                   
   287      3209     113518.0     35.4      0.0          return action, roads, settlements, tradeFor, tradeWith

  1.61 seconds - c:\Users\Informatica\Documents\GitHub\Catan-Smart-Edition\CatanServer\src\secondNN.py:144 - __init__
145.35 seconds - c:\Users\Informatica\Documents\GitHub\Catan-Smart-Edition\CatanServer\src\secondNN.py:250 - forward
